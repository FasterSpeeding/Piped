name: Build Container

on:
  schedule:
    - cron: "{{ CRON }}"
  push:
    branches: [ "master" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "master" ]

env:
  OCI_STORAGE_DIR: /oci-images

jobs:
  build-x86:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        architecture: [{{ ARM_ARCHITECTURES |  map("format_string", '"{}"') | join(", ") }}]

    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          submodules: "true"

      - name: Build image
        uses: ./.github/actions/build-container
        with:
          architecture: {% raw %}${{ matrix.architecture }}{% endraw %}

  build-arm:
    runs-on: ubuntu-24.04-arm
    strategy:
      matrix:
        architecture: [{{ ARM_ARCHITECTURES |  map("format_string", '"{}"') | join(", ") }}]

    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          submodules: "true"

      - name: Build image
        uses: ./.github/actions/build-container
        with:
          architecture: {% raw %}${{ matrix.architecture }}{% endraw %}

  push:
    runs-on: ubuntu-24.04
    if: github.event_name != 'pull_request'
    needs: [build-x86, build-arm]

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9

      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 #v3.9.2

      - name: Download images
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:{% raw %}
          pattern: container-build-*
          merge-multiple: true
          path: {% raw %}${{ env.RUNNER_TEMP }}/${{ env.OCI_STORAGE_DIR }}/{% endraw %}
          recurse_submodules: true{% endraw %}

      - name: Load images into podman
        id: load-images
        run: |{% raw %}
          tags=""
          for file in ${{ env.RUNNER_TEMP }}/${{ env.OCI_STORAGE_DIR }}/*.oci; do
            tag="$(basename --suffix='.oci' '$file')"
            crane copy "file://$file" "$tag"
            rm "$file"
            loaded_tags+="$tag"
          done

          echo "tags=$tags" >> $GITHUB_OUTPUT{% endraw %}

      - name: Generate container metadata
        id: metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: {% raw %}${{ inputs.REGISTRY }}/${{ inputs.IMAGE_NAME }}{% endraw %}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Push image
        id: push-image
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2.8
        with:{% raw %}
          tags: ${{ steps.metadata.outputs.tags }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}{% endraw %}

      # This log in step is only required to allow signing the container image{% raw %}
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}{% endraw %}

      - name: Sign the published container image
        env:{% raw %}
          TAGS: ${{ steps.metadata.outputs.tags }}
          DIGEST: ${{ steps.push-image.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}{% endraw %}
