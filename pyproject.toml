[project]
name = "piped"
requires-python = ">=3.11"
version = "0.1.0"

[dependency-groups]
bot = [
    "asgiref",
    "fastapi",
    "httpx[http2]",
    "jwt",
    "python-dateutil",
    "python-dotenv",
    "uvicorn",
    "uvloop; platform_system != 'Windows'",
]
coverage = ["coverage[toml]"]
freeze-locks = ["uv"]
lint = [
    "codespell>=2.2.2",
    "pre-commit-hooks>=4.4",
    "slotscheck>=0.16.1",
    "ruff",
]
publish = ["flit>=3.8.0"]
reformat = [
    "black>=22.10.0",
    "isort>=5.11.3",
    "pre-commit-hooks>=4.4",
    "pycln>=2.1.2",
    "sort-all>=1.2",
]
templating = ["Jinja2>=3.1.2"]
type-checking = [
    "mypy>=0.991",
    "nox",
    "pyright>=1.1.285",
    {include-group = "bot"},
    {include-group = "templating"},
]

[tool.black]
include = ".*pyi?$"
line-length = 120
skip-magic-trailing-comma = true
target-version = ["py311"]

[tool.coverage.run]
concurrency = ["multiprocessing"]
parallel = true
branch = true
timid = false
source = ["tanjun"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "^\\s*\\.\\.\\.$",
    "^\\s*@abc.abstractmethod$",
    "^if typing.TYPE_CHECKING:$"
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "COM812",  # Trailing comma missing (incompatible with black)
    "FIX002",  # Line contains TODO, consider resolving the issue
    "I001",    # [*] Import block is un-sorted or un-formatted
    "PGH003",  # Use specific rule codes when ignoring type issues
    "S101",    # Use of `assert` detected
    "SIM108",  # Use ternary operator `` instead of `if`-`else`-block
    "TD002",   # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    "TD003",   # Missing issue link on the line following this TODO
]

[tool.ruff.lint.per-file-ignores]
"bot/**/*.py" = [
    "INP001",  # File `` is part of an implicit namespace package. Add an `__init__.py`.
    "PT017",   # Found assertion on exception `exc` in `except` block, use `pytest.raises()` instead
]
"noxfile.py" = [
    "F403",    # `from noxfile import *` used; unable to detect undefined name
]
"python/*.py" = [
    "INP001",  # File `` is part of an implicit namespace package. Add an `__init__.py`.
]
"python/noxfile.template.py" = [
    "F403",    # `from noxfile import *` used; unable to detect undefined name
    "INP001",  # File `` is part of an implicit namespace package. Add an `__init__.py`.
]

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.pycodestyle]
# Technically this is 120, but black has a policy of "1 or 2 over is fine if it is tidier", so we have to raise this.
max-line-length = 130

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
max-args = 12
max-branches = 15

[tool.isort]
profile = "black"
py_version = "311"
force_single_line = true

[tool.mypy]
# some good strict settings
python_version = "3.11"
strict = true
warn_unreachable = true

# more narrow type ignores
show_error_codes = true

# these are used by pyright
warn_unused_ignores = false
warn_redundant_casts = false

# compatibility with pyright
allow_redefinition = true
disable_error_code = ["type-abstract"]

[tool.piped]
codespell_ignore = "PullRequest"
default_sessions = ["reformat", "verify-markup", "lint", "spell-check", "type-check"]
hide = ["build", "fetch-piped", "publish", "slot-check", "test", "test-publish", "test-coverage"]
path_ignore = "github\\/actions\\/.+.yml|github\\/workflows\\/.+.yml"  # TODO: only ignore for verify-markup
top_level_targets = ["./bot", "./noxfile.py", "./python"]
version_constraint = "3.11"

[tool.piped.extra_installs]
type_check = ["./python"]

[tool.pyright]
include = ["bot/main.py", "noxfile.py", "python"]

pythonVersion = "3.11"
typeCheckingMode = "strict"
reportMissingModuleSource = "error"  # Is only "warning" on strict mode.

# Error code which are disabled even when general strict.
reportShadowedImports = "error"
reportCallInDefaultInitializer = "none"  # Ended up just complaining about cases where this was fine (e.g. timedeltas).
reportImplicitStringConcatenation = "none"  # Conflicts with flake8 config.
reportMissingSuperCall = "none"  # Way too strict (requires calls to `object.__init__`).
reportPropertyTypeMismatch = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "none"  # Enforces doing `_ = ...`.

# Error codes which lead to too many false-positives.
reportIncompatibleMethodOverride = "warning"    # This relies on ordering for key-word only arguments
                                                # which is more annoying than it's worth
reportUnknownMemberType = "warning"             # This messes with instance checking generic objects
reportUnknownArgumentType = "warning"           # Pretty much the same as reportUnknownMemberType
reportUnknownLambdaType = "warning"
reportImportCycles = "warning"                  # This isn't necessarily an issue if it's type checking only.
reportUnknownVariableType = "warning"           # Lotta false-positives, might fix/change later.

[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = true
