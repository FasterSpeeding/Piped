name: Build Container

on:
  schedule:
    - cron: "25 14 1 * *"
  push:
    branches: [ "master" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
  workflow_call:
    inputs:
      architectures:
        description: "JSON array of objects with the fields 'runner-' and 'architecture' set."
        required: false
        type: string
      maximise-space:
        description: "Whether to run steps which increase straoge in the job's runtime"
        required: false
        type: boolean

env:
  IMAGE_NAME: ${{ github.repository }}
  MAXIMISE_SPACE: ${{ inputs.maximise-space || false }}
  OCI_STORAGE_DIR: ./oci-images
  REGISTRY: "ghcr.io"

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.arm-matrix }}

    steps:
      - id: set-matrix
        shell: bash
        run: |
          set +o pipefail

          if [[ -u "${{ inputs.architectures }}" ]]
          then
            echo "matrix=${{ inputs.architectures }}" >> "$GITHUB_OUTPUT"
          else
            echo "matrix=[{\"os\":\"ubuntu-24.04\",\"architecture\":\"amd64\"},{\"os\":\"ubuntu-24.04-arm\",\"architecture\":\"arm64\"}]" >> "$GITHUB_OUTPUT"
          fi

  build:
    strategy:
      matrix: 
        build-config: ${{ fromJSON(needs.set-matrix.outputs.matrix) }}

    needs: [set-matrix]
    runs-on: ${{ matrix.build-config.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          submodules: "true"

      - name: Build image
        uses: ./.github/actions/build-container
        with:
          architecture: ${{ matrix.build-config.architecture }}

  push:
    runs-on: ubuntu-24.04
    if: github.event_name != 'pull_request'
    needs: [build]

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Maximize build space
        if: env.MAXIMISE_SPACE == true
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9

      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 #v3.9.2

      - name: Download images
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: container-build-*
          path: ${{ env.OCI_STORAGE_DIR }}/

      - name: Generate container metadatata
        id: metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Create manifest
        id: load-images
        run: |
          set +o pipefail

          manifest_tag="$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]'):$(uuidgen)"
          podman manifest create "$manifest_tag"
          echo "${{ steps.metadata.outputs.tags }}" | xargs -I {} podman tag "$manifest_tag" {}

          while read -r -d $'\0' image_path; do
            echo "Adding $image_path to manifest"
            podman manifest add "$manifest_tag" "oci-archive:$image_path"
          done < <(find ${{ env.OCI_STORAGE_DIR }}/ -type f -maxdepth 1 -name "*.oci" -print0)

      - name: Push image
        id: push-image
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2.8
        with:
          tags: ${{ steps.metadata.outputs.tags }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This log in step is only required to allow signing the container image
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign the published container image
        env:
          TAGS: ${{ steps.metadata.outputs.tags }}
          DIGEST: ${{ steps.push-image.outputs.digest }}
        run: |
          set +o pipefail

          echo "${TAGS}" | xargs -I {} cosign sign --yes "{}@${DIGEST}"
