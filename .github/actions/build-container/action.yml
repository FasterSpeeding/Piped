name: "Build a container"
description: "Build a container"  

inputs:
  architecture:
    description: "The architecture to build the container for"
    required: false
    default: ""
  containerfiles:
    description: "Links to the containerfiles to build"
    required: false
    default: |
      ./Containerfile
  container_build_context:
    description: "The directory to pass through as the working directory during container builds"
    required: false
    default: .
  image-name:
    description: "The built image's name"
    required: false
    default: ${{ github.repository }}
  keep-image:
    description: "Whether to keep a local copy of the image"
    required: false
    default: "./"
  registry:
    description: "Registry the built image is for"
    required: false
    default: ghcr.io

outputs:
  image:
    description: "Name of the image built"
    value: ${{ steps.build.outputs.image }}
  image-artifact-id:
    description: "Name of the artifact holding the built iamge"
    value: ${{ steps.upload-coverage.outputs.artifact-id }}
  image-artifact-url:
    description: "Name of the artifact holding the built iamge"
    value: ${{ steps.upload-coverage.outputs.artifact-url }}
  image-artifact-digest:
    description: "Name of the artifact holding the built iamge"
    value: ${{ steps.upload-coverage.outputs.artifact-digest }}
  tags:
    description: "List of the tags that were created, separated by spaces"
    value: ${{ steps.build.outputs.tags }}
  image-with-tag:
    description: "Name of the image tagged with the first tag present"
    value: ${{ steps.build.outputs.image-with-tag }}

runs:
  using: composite

  steps:
    - name: Install QEMU
      if: inputs.architecture != ''
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      with:
        platforms: ${{ inputs.architecture }}

    - name: Generate build configuration
      id: gen-config
      shell: bash
      run: |
        if [[ -n ${{ inputs.architecture }} ]]; then
          architecture="${{ inputs.architecture }}"
          platform="linux/${{ inputs.architecture }}"
        else
          platform="$(podman info -f {{.Version.OsArch}})"
          architecture="$(echo '${{ inputs.architecture }}' | cut -d '/' -f2)"
        fi

        build_uuid=$(uuidgen)
        echo "architecture=$architecture" >> "$GITHUB_OUTPUT"
        echo "artifact-name=$architecture-$build_uuid" >> "$GITHUB_OUTPUT"
        echo "platform=$platform" >> "$GITHUB_OUTPUT"
        echo "tag=localhost/$architecture/$build_uuid:latest" >> "$GITHUB_OUTPUT"

    - name: Generate container metadata
      id: metadata
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
      with:
        images: ${{ inputs.REGISTRY }}/${{ inputs.IMAGE-NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build image
      id: build
      uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2.13
      with:
        tags: ${{ steps.gen-config.outputs.tag }}
        platforms: ${{ steps.gen-config.outputs.platform }}
        oci: true
        labels: ${{ steps.metadata.outputs.labels }}
        containerfiles: ${{ inputs.containerfiles }}
        context: ${{ inputs.container_build_context }}

    - name: Save image
      id: save
      shell: bash
      run: |
        OUTPUT_DIR="./oci-images"
        OUTPUT_PATH="$OUTPUT_DIR/${{ steps.gen-config.outputs.artifact-name }}.oci"

        mkdir -p "$OUTPUT_DIR"
        podman save --uncompressed --format oci-archive -o "$OUTPUT_PATH" "${{ steps.gen-config.outputs.tag }}"

        echo "image-dir=$OUTPUT_DIR" >> "$GITHUB_OUTPUT"
        echo "image-path=$OUTPUT_PATH" >> "$GITHUB_OUTPUT"

    - name: Create coverage artifacts
      id: upload-coverage
      uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
      with:
        name: container-build-${{ steps.gen-config.outputs.artifact-name }}
        path: ${{ steps.save.outputs.image-dir }}/*.oci
        if-no-files-found: error
        retention-days: 1

    - name: Clear local store
      shell: bash
      run: |
        rm -r ${{ steps.save.outputs.image-path }}

        if [[ keep-image == "false" ]]; then
          podman image rm ${{ steps.build.outputs.image-with-tag }}
        fi
